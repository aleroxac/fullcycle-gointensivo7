networks:
  fullcycle:



services:
  ## observability: logs
  grafana-promtail:
    container_name: grafana-promtail
    hostname: grafana-promtail
    restart: always
    image: grafana/promtail:latest
    volumes:
      - ./docker/grafana-promtail-config.yaml:/etc/promtail/promtail-config.yaml

  grafana-loki:
    container_name: grafana-loki
    hostname: grafana-loki
    restart: always
    image: grafana/loki:latest
    volumes:
      - ./docker/grafana-loki-config.yaml:/etc/loki/loki-config.yaml
    ports:
      - 3100:3100
    networks:
      - fullcycle
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --timeout=5 http://localhost:3100/ready || exit 1"]
      start_interval: 10s
      interval: 10s
      timeout: 5s
      retries: 3


  ## observability: metrics
  prometheus:
    container_name: prometheus
    hostname: prometheus
    restart: always
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - fullcycle
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:9090/-/healthy || exit 1"]
      start_interval: 2s
      interval: 10s
      timeout: 5s
      retries: 3

  postgres-exporter:
    container_name: postgres-exporter
    hostname: postgres-exporter
    restart: always
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      POSTGRES_DB: books
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"

  node-exporter:
    container_name: node-exporter
    hostname: node-exporter
    restart: always
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    deploy:
      mode: global

  k6:
    container_name: k6
    hostname: k6
    image: loadimpact/k6:latest
    restart: no
    ports:
      - "6565:6565"
    networks:
      - fullcycle
    environment:
      - BASE_URL=http://gobook:8080
    volumes:
      - ./docker/load-test.js:/test/load-test.js
    entrypoint: [ "k6", "run",  "/test/load.test.js", "--address", "0.0.0.0:6565" ]

  k6-exporter:
    container_name: k6-exporter
    hostname: k6-exporter
    restart: always
    image: savvagenchevskiy/k6-exporter:latest
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - fullcycle
    ports:
      - 9091:9091
    environment:
      - METRICS_PORT=9091
      - COLLECT_INTERVAL=10
      - K6_SERVER=http://k6:6565
    depends_on:
      - k6

  cadvisor:
    container_name: cadvisor
    hostname: cadvisor
    restart: always
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    deploy:
      mode: global

  ## observability: profilling
  grafana-pyroscope:
    container_name: grafana-pyroscope
    hostname: grafana-pyroscope
    restart: always
    image: grafana/pyroscope:latest
    ports:
      - 4040:4040

  ## observability: uptime
  blackbox:
    container_name: blackbox
    hostname: blackbox
    restart: always
    image: prom/blackbox-exporter:v0.10.0
    ports:
      - 9115:9115
    volumes:
      - ./docker/blackboxexporter-config.yaml/:/etc/blackboxexporter/config.yml
    command:
      - '--config.file=/etc/blackboxexporter/config.yml'

  uptime-kuma:
    container_name: uptime-kuma
    hostname: uptime-kuma
    restart: restart
    image: louislam/uptime-kuma:1.23.13-alpine
    ports:
      - 3001:3001

  ## observability: traces
  jaeger:
    container_name: jaeger
    hostname: jaeger
    restart: always
    image: jaegertracing/all-in-one:latest
    ports:
      - 16686:16686
      - 14268:14268
      - 14250:14250
    networks:
      - fullcycle
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:16686 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  otel-collector:
    container_name: otel-collector
    hostname: otel-collector
    restart: always
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - 1888:1888   # pprof extension
      - 8888:8888   # Prometheus metrics exposed by the collector
      - 8889:8889   # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317   # OTLP gRPC receiver
      - 55679:55679 # zpages extension
    volumes:
      - ./docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - fullcycle
    depends_on:
      - jaeger

  grafana-tempo:
    container_name: grafana-tempo
    hostname: grafana-tempo
    restart: always
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - .docker/grafana-tempo-config.yaml:/etc/tempo.yaml
    ports:
      - 14268:14268 # jaeger ingest
      - 3200:3200   # tempo
      - 4317:4317   # otlp grpc
      - 4318:4318   # otlp http
      - 9411:9411   # zipkin
    depends_on:
      - init

  ## observability: alerts
  alertmanager:
    container_name: alertmanager
    hostname: alertmanager
    restart: always
    image: prom/alertmanager:v0.12.0
    volumes:
      - .docker/alertmanager-config.yaml:/etc/alertmanager/config.yml
    ports:
      - 9093:9093
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'
    deploy:
      mode: global

  ## observability: dashboards
  grafana:
    container_name: grafana
    hostname: grafana
    restart: always
    image: grafana/grafana:latest
    volumes:
      - ./docker/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/ds.yaml
    ports:
      - 3000:3000
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - fullcycle
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:3000/api/health || exit 1"]
      start_interval: 2s
      interval: 10s
      timeout: 5s
      retries: 3



  ## database
  postgresql:
    container_name: postgresql
    hostname: postgresql
    restart: always
    image: postgres:9.6-alpine
    environment:
      POSTGRES_DB: books
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - 5432:5432
    networks:
      - goexpert
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    hostname: migrations
    container_name: migrations
    restart: no
    image: migrate/migrate:v4.17.1
    networks: 
      - goexpert
    environment:
      POSTGRES_DB: books
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - ./sql/migrations:/migrations
    command: -path=/migrations -database "postgres://root:root@postgresql:5432/books" -verbose up
    depends_on:
      postgresql:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin
    hostname: pgadmin
    restart: always
    image: dpage/pgadmin4:2024-07-25-1
    environment:
      PGADMIN_DEFAULT_EMAIL: root@domain.com
      PGADMIN_DEFAULT_PASSWORD: root
      POSTGRES_DB: books
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - 8000:8000
    networks:
      - goexpert
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'SELECT 1;' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5



  ## app
  gobook:
    hostname: gobook
    container_name: gobook
    restart: always
    env_file:
      - ./docker/.env
      - ./.env
    build:
      context: .build
      dockerfile: .build/Dockerfile
      args:
        APP_PORT: ${APP_PORT}
        APP_HEALTHCHECK_PATH: ${APP_HEALTHCHECK_PATH}
        VCS_REF: ${VCS_REF}
        VCS_URL: ${VCS_URL}
        BUILD_DATE: ${BUILD_DATE}
        IMAGE_VERSION: ${IMAGE_VERSION}
      tags: 
        - aleroxac/fullcycle-gointensivo7-gobook:v${IMAGE_VERSION}
        - aleroxac/fullcycle-gointensivo7-gobook:latest
      platforms:
        - linux/amd64
    ports:
      - ${APP_PORT}:${APP_PORT}
    networks: 
      - fullcycle
    healthcheck:
      test: ["CMD", "/app/healthcheck"]
      start_period: 2s
      interval: 1s
      timeout: 1s
      retries: 3
    depends_on:
      postgresql:
        condition: service_healthy
      otel-collector:
        condition: service_started
